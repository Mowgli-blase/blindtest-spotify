{"version":3,"sources":["logo.svg","loading.svg","Button.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","getRandomNumber","x","Math","floor","random","App","useState","text","setText","tracks","setTracks","songsLoaded","setSongsLoaded","currentTrack","setCurrentTrack","AlbumCover","src","track","album","images","url","style","width","height","track1","track2","track3","checkAnswer","answer_id","id","swal","then","choseNextTrack","items","length","useEffect","fetch","method","headers","Authorization","response","json","data","console","log","trackTab","array","counter","index","temp","shuffleArray","className","logo","alt","preview_url","playStatus","Sound","status","PLAYING","name","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.092ec9f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6a581294.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.ed34bc26.svg\";","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = (props) => (\r\n  <button onClick={props.onClick}>{props.children}</button>\r\n);\r\n\r\nexport default Button;\r\n","/*global swal*/\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport loading from './loading.svg';\r\nimport './App.css';\r\nimport Sound from 'react-sound';\r\nimport Button from './Button';\r\n\r\nconst apiToken = 'BQAg4SkZ_d8XhGAIarmgxZE-8FU421KiQi_ycI6SoVLcayT2JXG4ttZjkjHwCuqJckdZ4a22o96h3Dx5IxTgChtMBawdo72hQaHqJYHtmmB1nFuonoVDNHuc6tXBmTYh0o-rcU9PmWRQKAutwtG7wed1rVOC-OkLlnYAImbienga_Q';\r\n\r\n\r\nfunction shuffleArray(array) {\r\n  let counter = array.length;\r\n\r\n  while (counter > 0) {\r\n    let index = getRandomNumber(counter);\r\n    counter--;\r\n    let temp = array[counter];\r\n    array[counter] = array[index];\r\n    array[index] = temp;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/* Return a random number between 0 included and x excluded */\r\nfunction getRandomNumber(x) {\r\n  return Math.floor(Math.random() * x);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [text, setText] = useState('');\r\n  const [tracks, setTracks] = useState('');\r\n  const [songsLoaded, setSongsLoaded] = useState(false);\r\n  const [currentTrack, setCurrentTrack] = useState();\r\n\r\n\r\n  const AlbumCover = (props) =>  {\r\n      let track = props.track;\r\n      const src = track.album.images[0].url;\r\n\r\n      return (\r\n          <img src={src} style={{ width: 400, height: 400 }} />\r\n      );\r\n  }\r\n\r\n  let track1, track2, track3;\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.spotify.com/v1/me/tracks', {\r\n    method: 'GET',\r\n    headers: {\r\n       Authorization: 'Bearer ' + apiToken,\r\n      },\r\n  })\r\n  .then(response => response.json())\r\n  .then((data) => {\r\n    console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\r\n    setTracks(data);\r\n    setText(data.items.length);\r\n\r\n    setCurrentTrack(data.items[getRandomNumber(data.items.length)].track);\r\n\r\n    setSongsLoaded(true);\r\n\r\n  });\r\n  }, []);\r\n\r\n\r\n\r\n  function checkAnswer(answer_id) {\r\n    if(answer_id == currentTrack.id) {\r\n      swal('Bravo', 'Sous-titre', 'success').then( () => choseNextTrack());\r\n    } else {\r\n      swal('Alerte !!', 'Ceci est une alerte', 'error').then( () => choseNextTrack());\r\n\r\n    }\r\n  };\r\n\r\n  function choseNextTrack() {\r\n    setCurrentTrack(tracks.items[getRandomNumber(tracks.items.length)].track);\r\n  }\r\n\r\n\r\n  if(songsLoaded) {\r\n\r\n    track1 = tracks.items[getRandomNumber(tracks.items.length)].track;\r\n    track2 = tracks.items[getRandomNumber(tracks.items.length)].track;\r\n    track3 = currentTrack;\r\n    let trackTab = [track1, track2, track3];\r\n    trackTab = shuffleArray(trackTab);\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n          <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\r\n        </header>\r\n        <div className=\"App-images\">\r\n          <p>Nombre de musiques dans la playlist : {text}</p>\r\n          <AlbumCover track={currentTrack}/>\r\n          <Sound url={currentTrack.preview_url} playStatus={Sound.status.PLAYING}/>\r\n        </div>\r\n        <div className=\"App-buttons\">\r\n        <Button onClick={() => checkAnswer(trackTab[0].id)}>Track 1 : {trackTab[0].name}</Button>\r\n        <Button onClick={() => checkAnswer(trackTab[1].id)}>Track 2 : {trackTab[1].name}</Button>\r\n        <Button onClick={() => checkAnswer(trackTab[2].id)}>Track 3 : {trackTab[2].name}</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  else {\r\n    return (\r\n      <img src={loading} className=\"App-logo\" alt=\"logo\"/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}